<script type="text/javascript"> 
var selectedNode = tree.getSelectionModel().getSelectedNode();
setTimeout(function()
{
	dsBanner = new Ext.data.Store({ 
		proxy: new Ext.data.HttpProxy({
			url: './services/banner/fetch-banner'	
		}),
		reader: new Ext.data.JsonReader({
			root: 'banner',
			totalProperty: 'totalCount',
			id: 'guid',
		}, [
				'title', 'createdby', 'modifiedby',  
				{name:'createdDate', mapping:'createdDate'},
				{name:'guid',mapping:'guid'},
				'status', 'source', 'type', 'alt', 'url'
		]),
		remoteSort: true
	});
	
    function renderTbanner(value, p, record){ 
        return String.format( 
                '<div class="topic"><b>{0}</b><br /><span class="author">by {1}</span></div>',
                value, record.data.createdby, record.id, record.data.guid);
    }
    function renderCreatedDate(value, p, r){
        return String.format('<span class="post-date">{0}</span><br/>modifiedBy {1}', value, r.data['modifiedby']);
    }
    function renderStatusBanner(val)
    {
    	if (val == 'publish_y') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/publish_y.png">';
    	} else if (val == 'publish_g') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/publish_g.png">';
    	} else if (val == 'publish_r') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/publish_r.png">';
    	} else if (val == 'publish_x') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/publish_x.png">';
    	} else if (val == 'disabled') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/disabled.png">';
    	}
    }

    var xg = Ext.grid;
    var sm = new xg.CheckboxSelectionModel();
    var pg = new Ext.ux.grid.PagingRowNumberer({header:'No.',width:30});
    var cm = new xg.ColumnModel
   	([
   		sm,
   		pg,
		{header: "Banner", dataIndex: 'title', width: 277, renderer:renderTbanner},
	    {header: "Created on", dataIndex: 'createdDate', width: 100, renderer:renderCreatedDate},
	    {header: "Published", dataIndex: 'status', width: 30, renderer: renderStatusBanner}
   	]);
	
	// add a paging toolbar to the grid's footer
	var paging = new Ext.ux.PagingToolbar({
		pageSize: 25,
		store: dsBanner,
		displayInfo: true,
		displayMsg: 'Displaying topics {0} - {1} of {2}',
		emptyMsg: "No data to display"
	});
	
	var gridBanner = new xg.GridPanel({
		id:'banner-grid',
	    ds: dsBanner,
	    cm: cm,
	    sm: sm,
	    bbar: paging,
		viewConfig: {
			forceFit:true,
			enableRowBody:true,
			showPreview:true,
			getRowClass : function(record, rowIndex, p, ds)
			{
              	if (this.showPreview) { 
              		if (record.data.type == 1) {
              			p.body = "<div align='center'><img src="+record.data.source+" alt='"+record.data.alt+"'><br>Format: Picture</div>";
              		}
              		else if (record.data.type == 2) {
              			var url = record.data.url;
              			var swfdims = url.split('[x]');
              			p.body = "<p div='center'><object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000' codebase='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=5,0,0,0' width="+swfdims[0]+" height="+swfdims[1]+">";
              			p.body += "<param name=movie value="+record.data.source+">";
              			p.body += "<param name=quality value=high>";
              			p.body += "<embed src="+record.data.source+" quality=high pluginspage='http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash' type='application/x-shockwave-flash' width="+swfdims[0]+" height="+swfdims[1]+">";
              			p.body += "</embed></object><br>Format: Flash</div>";
              		}
                	return 'x-grid3-row-expanded';
            	}
            	return 'x-grid3-row-collapsed';
			}
        },
	    tbar: [{
	    	text: 'Add banner',
	    	icon: './js/extjs/resources/images/default/silk/icons/page_white_copy.png',
	    	cls: 'x-btn-text-icon',
	    	tooltip: 'Click to add banner',
	    	handler: function(){
	    		ext_get("./admin/banner_manager/addbanner",700,500,'addbanner');
	    	}
	    },
	    {
	    	text: 'Zone Management',
	    	icon: './js/extjs/resources/images/default/silk/icons/lightbulb.png',
	    	cls: 'x-btn-text-icon',
	    	tooltip: 'Click to add zone',
	    	handler: function(){
	    		ext_get("./admin/banner_manager/zone",700,500,'zone');
	    	}
	    },
	    {
	    	text: 'Delete [' + tree.getSelectionModel().getSelectedNode().text + ']',
	    	icon: './js/extjs/resources/images/default/silk/icons/bin_empty.png',
	    	cls: 'x-btn-text-icon',
	    	tooltip: 'Click to delete selected rows',
	    	handler: function(){
	    		var selectedKeys = gridBanner.selModel.selections.keys;
	    		if (selectedKeys.length > 0)
	    		{
	    			Ext.MessageBox.confirm('Confirm','Do you really want to delete selection?',deleteRecordBanner);
	    		}
	    		else
	    		{
	    			Ext.MessageBox.alert('Oops ...','Please select at least one item to delete');
	    		}
	    	}
        },
        {
	    	text: 'Refresh',
	    	icon: './js/extjs/resources/images/default/silk/icons/database_refresh.png',
	    	cls: 'x-btn-text-icon',
	    	tooltip: 'Click to Refresh the table',
	    	handler: function(){ dsBanner.reload(); }
        },
	    '-', {
	        	pressed: true,
	            enableToggle:true,
	            text:'&nbsp;Preview',
	            tooltip: 'View a short summary of each post in the list',
	            iconCls: 'summary',
	            toggleHandler: toggleDetails
		}
	    ],
	    selModel: new xg.RowSelectionModel({singleSelect:false}),
	    enableColLock:false,
	    stripeRows: true,
	    loadMask: true,
	    layout:'fit',
	    forceFit:'fit'
	});

  	Ext.getCmp('kutu-Banner').add(gridBanner);
  	Ext.getCmp('kutu-Banner').doLayout();
  	
	dsBanner.load({params:{start:0, limit:25}});
	
	/**
	 * Function for Deleting record(s)
	 * @param { Object } btn
	 */
	function deleteRecordBanner(btn) {
		if (btn=='yes')
		{
	    	var selections = gridBanner.selModel.getSelections();
			for(j = 0; j < gridBanner.selModel.getCount(); j++){
				var conn = new Ext.data.Connection();
				conn.on('beforerequest', function() {
					Ext.MessageBox.wait('delete clinic [' + selections[j].json.title + ']'); 
				});						
				conn.request({
					url: './admin/api_banner/delete',
					params:{guid: selections[j].json.guid},
					callback:function(options, success, response){
						if (success) {
							json = Ext.decode( response.responseText );
							if ( json.success ) {
								dsBanner.reload(); 
								info( 'success', json.message );
							} else {
								Ext.Msg.alert( 'Failure', json.error );
							}
						} else {
							Ext.Msg.alert( 'Error', 'Failed to connect to the server.');
						}
					}
				});
				conn.on('requestcomplete', function() {
					Ext.MessageBox.hide();
				});						
			}
		}
	}

    function toggleDetails(btn, pressed){
        var view = Ext.getCmp('banner-grid').getView();
        view.showPreview = pressed;
        view.refresh();
    }
    
    gridBanner.on('rowcontextmenu',showRowContextMenu);
    
	function showRowContextMenu(grid, rowIndex, e)
	{
		var coords = e.getXY();
		rowRecord = dsBanner.getAt(rowIndex);
		e.stopEvent();
		menuG.showAt([coords[0], coords[1]]);
	}
	    
	var menuG = new Ext.menu.Menu('mainGridRowContext');
	menuG.add({
		text:'modify', 
		handler: function(){ 
			ext_get("./admin/banner_manager/editbanner/guid/"+rowRecord['id'],700,500,'editbanner'); 
		}
	}
	,{
		text:'go to site',
		handler:function(){
			window.open(rowRecord.data['url']);
		}
	}
	,{
		text:'more info',
		handler:function(){
			ext_get("./admin/banner_manager/moreinfo/guid/"+rowRecord['id'],500,105,'moreinfo'); 
		}
	}
	);
	
}, 10);
</script>