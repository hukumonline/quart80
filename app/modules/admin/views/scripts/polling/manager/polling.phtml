<script type="text/javascript">
	ds = new Ext.data.Store({ 
		proxy: new Ext.data.HttpProxy({
			url: './services/polling/fetch-polling'
		}),
		reader: new Ext.data.JsonReader({
			root: 'poll',
			totalProperty: 'totalCount',
			id: 'guid'
		}, [
				'title','guid'
		]),
		remoteSort: true
	});
	
    function renderTopic(value, p, record){ 
        return String.format(
                '<div class="topic"><b>{0}</b></div>',
                value, record.data.guid);
    }
    function renderCreatedDate(value, p, r){
        return String.format('<span class="post-date">{0}</span><br/>modifiedBy {1}', value, r.data['modifiedby']);
    }
    
	Ext.ux.grid.PagingRowNumberer = Ext.extend(Ext.grid.RowNumberer, {
	  renderer : function(v, p, record, rowIndex, colIndex, store){
	    if (this.rowspan) {
	    	p.cellAttr = 'rowspan="' + this.rowspan + '"';
	    }
	
	    var so = store.lastOptions;
	    var sop = so? so.params : null;
	    return ((sop && sop.start)? sop.start : 0) + rowIndex + 1;
	  }
	});

    var xg = Ext.grid;
    var sm = new xg.CheckboxSelectionModel();
    var pg = new Ext.ux.grid.PagingRowNumberer({header:'No.',width:30});
    var cm = new xg.ColumnModel
   	([
   		sm,
   		pg,
		{header: "Title", dataIndex: 'title', width: 770, renderer:renderTopic},
	    {header: "guid", dataIndex: 'guid', width: 100, hidden: true}
   	]);
	
	var paging = new Ext.ux.PagingToolbar({
		pageSize: 25,
		store: ds,
		displayInfo: true,
		displayMsg: 'Displaying topics {0} - {1} of {2}',
		emptyMsg: "No data to display"
	});
	
	var gridPoll = new xg.GridPanel({
		id:'poll-grid',
	    ds: ds,
	    cm: cm,
	    sm: sm,
	    bbar: paging,
	    plugins: [ 
	    	new Ext.ux.grid.Search({
	    		searchText: 'find',
	    		mode: 'remote',
	    		iconCls: 'find',
	    		dateFormat: 'd m Y H:i',
	    		position: 'top'	
	    	})
	    ],
	    tbar: [{
			text: 'Add',
		    icon: './js/extjs/resources/images/default/silk/icons/database_add.png',
		    cls: 'x-btn-text-icon',
		    tooltip: 'Click to add a row',
		    handler: function(){ ext_get("./admin/polling_manager/add",500,300,'addpolling'); }
       	},
        {
		  	text: 'Delete',
		   	icon: './js/extjs/resources/images/default/silk/icons/bin_empty.png',
		   	cls: 'x-btn-text-icon',
		   	tooltip: 'Click to delete selected rows',
		   	handler: function(){
		   		var selectedKeys = gridPoll.selModel.selections.keys;
		   		if (selectedKeys.length > 0)
		   		{
		   			Ext.MessageBox.confirm('Confirm','Do you really want to delete selection?',deleteRecord);
		   		}
		   		else
		   		{
		   			Ext.MessageBox.alert('Oops ...','Please select at least one item to delete');
		   		}
		   	}
        },
        {
		  	text: 'Refresh',
		   	icon: './js/extjs/resources/images/default/silk/icons/database_refresh.png',
		   	cls: 'x-btn-text-icon',
		   	tooltip: 'Click to Refresh the table',
		   	handler: function(){ ds.reload(); }
        }
	    ],
	    selModel: new xg.RowSelectionModel({singleSelect:false}),
	    trackMouseOver:false,
	    loadMask: {msg:'Loading Polling...'},
	    enableColLock:false,
	    stripeRows: true,
	    loadMask: true,
	    layout:'fit',
	    forceFit:'fit'
	});

  	Ext.getCmp('kutu-Polling').add(gridPoll);
  	Ext.getCmp('kutu-Polling').doLayout();
	ds.load({params:{start:0, limit:25}});
	
	function deleteRecord(btn) {
		if (btn=='yes')
		{
	    	var selections = gridPoll.selModel.getSelections();
			for(j = 0; j < gridPoll.selModel.getCount(); j++){
				var conn = new Ext.data.Connection();
				conn.on('beforerequest', function() {
					Ext.MessageBox.wait('delete poll [' + selections[j].json.title + ']'); 
				});						
				conn.request({
					url: './admin/api_polling/delete',
					params:{pguid: selections[j].json.guid},
					callback:function(options, success, response){
						if (success) {
							json = Ext.decode( response.responseText );
							if ( json.success ) {
								ds.reload(); 
								info( 'success', json.message );
							} else {
								Ext.Msg.alert( 'Failure', json.error );
							}
						} else {
							Ext.Msg.alert( 'Error', 'Failed to connect to the server.');
						}
					}
				});
				conn.on('requestcomplete', function() {
					Ext.MessageBox.hide();
				});						
			}
		}
	}
		
</script>