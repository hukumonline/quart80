<?php
/**
 * @package kutump
 * @copyright 2008-2009 hukumonline.com/en.hukumonline.com
 * @author Nihki Prihadi <nihki@hukumonline.com>
 *
 * $Id: user.phtml 2009-01-10 19:35: $
 */
?>

<style type="text/css">
.status_yes { 
   background-image:url(./js/extjs/resources/images/default/silk/icons/accept.png) !important;
   background-repeat: no-repeat;
   background-position: center;
}
.redcell { background-color:#FFE5E5 !important;}
.greenrow { background-color:#C3FF8F !important;}
.yellowrow { background-color:#FFFF66 !important;}
.rem-data-expand { height: 300px; overflow:auto; }
#baseFooter { width: 600px; margin: 0 auto; }
</style>

<script type="text/javascript"> 

setTimeout(function()
{
	dsGrouping = new Ext.data.GroupingStore({
		proxy: new Ext.data.HttpProxy({
			url: './services/auth/package'
		}),	
		reader: new Ext.data.JsonReader({
			root: 'package',
			totalProperty: 'totalCount',
			id: 'packageId'
		}, [
				{name:'packageId'},
				{name:'packageName'}
		]),
		remoteSort: true
	});
	
	dsGroupingStatus = new Ext.data.GroupingStore({
		proxy: new Ext.data.HttpProxy({
			url: './services/auth/status'
		}),	
		reader: new Ext.data.JsonReader({
			root: 'status',
			totalProperty: 'totalCount',
			id: 'statusId'
		}, [
				{name:'statusId'},
				{name:'statusMember'}
		]),
		remoteSort: true
	});
	
	dsContentHistory = new Ext.data.GroupingStore({ 
		proxy: new Ext.data.HttpProxy({
			url: './services/auth/user-history',
			timeout: 90000
		}),
		reader: new Ext.data.JsonReader({
			root: 'history',
			totalProperty: 'totalCount',
			id: 'id'
		}, [
				{name:'id'},
				{name:'uid'},
				{name:'fullName'},
				{name:'username'},
				{name:'company'},
				{name:'createdDate'},
				{name:'expirationDate'},
				{name:'paymentId'},
				{name:'DaysLeft'},
				{name:'packageId'},
				{name:'value'},
				{name:'periodeId'},
				{name:'isEmailSent'},
				{name:'isActive'}
		]),
		sortInfo:{field: 'id', direction: "DESC"}
	});
	
    function renderPosValHistory(val)
    {
    	if (val == 0)
    	{
    		return "Today";
    	}
    	else if (val == "x")
    	{
    		return "";
    	}
    	else
    	{
    		return val;
    	}
    }
    
    function renderEmailHistory(val, cell, record, rowIndex, columnIndex, store)
    {
    	if (val == 'N')
    	{
    		rowRecord = gridUserHistory.getStore().getAt(rowIndex);
    		/*return '<a href="javascript:;" onclick="sentEmail(\''+rowRecord['id']+'\',\''+rowRecord.get('uid')+'\');return false;"><img src="./js/extjs/resources/images/default/silk/icons/cross.png"></a>';*/
    		return '<img src="./js/extjs/resources/images/default/silk/icons/cross.png">';
    	}
    	else if (val == "x")
    	{
    		return "";
    	}
    	else
    	{
    		cell.css = "status_yes";
    		return;
    	}
    }
    
    function renderStatusHistory(val, cell, record, rowIndex, columnIndex, store)
    {
    	rowRecord = gridUserHistory.getStore().getAt(rowIndex);
    	if (val == 0)
    	{
    		/*return '<a href="javascript:;" onclick="changeStatus(\''+rowRecord['id']+'\',\''+rowRecord.get('uid')+'\',\'down\');return false;"><img src="./js/extjs/resources/images/default/silk/icons/cross.png"></a>';*/
    		return '<img src="./js/extjs/resources/images/default/silk/icons/cross.png">';
    	}
    	else if (val == "x")
    	{
    		return "";
    	}
    	else
    	{
    		/*return '<a href="javascript:;" onclick="changeStatus(\''+rowRecord['id']+'\',\''+rowRecord.get('uid')+'\',\'up\');return false;"><img src="./js/extjs/resources/images/default/silk/icons/accept.png"></a>';*/
    		return '<img src="./js/extjs/resources/images/default/silk/icons/accept.png">';
    	}
    }
    
	// custom RowNumberer for use with paging GridPanels
	Ext.ux.grid.PagingRowNumberer = Ext.extend(Ext.grid.RowNumberer, {
	  renderer : function(v, p, record, rowIndex, colIndex, store){
	    if (this.rowspan) {
	      p.cellAttr = 'rowspan="' + this.rowspan + '"';
	    }
	
	    var so = store.lastOptions;
	    var sop = so? so.params : null;
	    return ((sop && sop.start)? sop.start : 0) + rowIndex + 1;
	  }
	});

    var paymentHistory = new Ext.data.SimpleStore({
        fields: ['paymentId','payment'],
        data : [['0','0'],['1','1'],['2','2'],['3','3'],['4','4'],['5','5'],['6','6'],['7','7'],['8','8'],['9','9'],['10','10'],['11','11'],['12','12']]
    });
    
    var xgh = Ext.grid;
    var smh = new xgh.CheckboxSelectionModel();
    var pg = new Ext.ux.grid.PagingRowNumberer({header:'No.',width:30});
    var cm = new xgh.ColumnModel
   	([
   		smh,
   		pg,
	    {header: "id", dataIndex: 'id', width: 100, sortable: true, hidden: true},
	    {header: "uid", dataIndex: 'uid', width: 100, sortable: true, hidden: true},
	    {header: "User name", dataIndex: 'fullName', width: 100, sortable: true},
		{header: "Login name", dataIndex: 'username', width: 100, sortable: true, hidden: true},
		{header: "Client name", dataIndex: 'company', width: 150, sortable: true},
		{
			header: "From", 
			dataIndex: 'createdDate', 
			width: 80, 
			sortable: true,
			hidden: false
		},
		{header: "Till", dataIndex: 'expirationDate', width: 80, sortable: true, hidden: false},
		{
			 header: "Package"
			,dataIndex: 'packageId'
			,width: 100
			,sortable: true
			,hidden: false
			/*
			,editor: new Ext.form.ComboBox({
				width:400,
				typeAhead: false,
				triggerAction: 'all',
				lazyRender:true,
				store: dsGrouping,
				displayField:'packageName',
				valueField:'packageId'	
			})
			*/
		},
		{
			 header: "Status"
			,dataIndex: 'periodeId'
			,width: 70
			,sortable: true
			,hidden: false
			/*
			,editor: new Ext.form.ComboBox({
				typeAhead: false,
				triggerAction: 'all',
				lazyRender:true,
				store: dsGroupingStatus,
				displayField:'statusMember',
				valueField:'statusId'	
			})
			*/
		},
		{
			 header: "P"
			,dataIndex: 'paymentId'
			,width: 25
			,sortable: true
			,hidden: false
			/*
			,editor: new Ext.form.ComboBox({
		        store: paymentHistory,
		        displayField:'payment',
		        typeAhead: true,
		        mode: 'local',
		        triggerAction: 'all',
		        emptyText:'Select month payment...',
		        selectOnFocus:true
			})
			*/			
		},
		{header: "D", dataIndex: 'DaysLeft', width: 25, sortable: true, renderer:renderPosValHistory},
		{header: "E", dataIndex: 'isEmailSent', width: 25, sortable: true, renderer:renderEmailHistory},
		{header: "S", dataIndex: 'isActive', width: 25, sortable: true, renderer:renderStatusHistory}
   	]);
	
	var paging = new Ext.ux.PagingToolbar({
		pageSize: 25,
		store: dsContentHistory,
		displayInfo: true,
		displayMsg: 'Displaying topics {0} - {1} of {2}',
		emptyMsg: "No data to display",
		items:[
			'-', {
				pressed: false,
				enableToggle: true,
		    	icon: './js/extjs/resources/images/default/silk/icons/page_white_magnify.png',
				cls: 'x-btn-icon',
				tooltip: 'Show preview',
				toggleHandler: toggleDetails
			}
		]	
	});
	
	var gridUserHistory = new xgh.EditorGridPanel({
	    store: dsContentHistory,
	    cm: cm,
	    sm: smh,
	    bbar: paging,
	    tbar: [{
	    	text: 'Delete',
	    	icon: './js/extjs/resources/images/default/silk/icons/bin_empty.png',
	    	cls: 'x-btn-text-icon',
	    	tooltip: 'Click to delete selected rows',
	    	handler: function(){
	    		var selectedKeys = gridUserHistory.selModel.selections.keys;
	    		if (selectedKeys.length > 0)
	    		{
	    			Ext.MessageBox.confirm('Confirm','Do you really want to delete selection?',deleteRecordHistory);
	    		}
	    		else
	    		{
	    			Ext.MessageBox.alert('Oops ...','Please select at least one item to delete');
	    		}
	    	}
	    }, {
	    	text: 'Refresh',
	    	icon: './js/extjs/resources/images/default/silk/icons/database_refresh.png',
	    	cls: 'x-btn-text-icon',
	    	tooltip: 'Click to Refresh the table',
	    	handler: function(){ 
	    		dsContentHistory.baseParams = {guid:'<?php echo $this->guid ?>'}; 
	    		dsContentHistory.load({params:{start:0, limit:25, guid:'<?php echo $this->guid ?>' }}); 
	    	}
	    }
	    ],
//        view: new Ext.grid.GroupingView({
//        	forceFit:true,
//            groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
//        }),
	    selModel: new xgh.RowSelectionModel({singleSelect:false}),
	    collapsible: true,
	    clicksToEdit:2,
	    enableColLock:false,
	    enableDragDrop: true,
	    stripeRows: true,
	    ddGroup: 'GridDD', 
	    loadMask: true,
	    layout:'fit',
	    forceFit:'fit'
	});

	// gridUserHistory.addListener('afteredit', handleEdit);
	// enable Drag 'n Drop
	// Ctrl + mouseClick
	enableDnD();

  	// render it	    
  	Ext.getCmp('history').add(gridUserHistory);
  	Ext.getCmp('history').doLayout();
  	
  	dsContentHistory.baseParams = {guid:'<?php echo $this->guid ?>'};
    dsContentHistory.load({params:{start:0, limit:25}});
    dsGrouping.load();
    
	gridUserHistory.getView().getRowClass = function(record, index) {
		if ((record.data.packageId == "member_individual" || record.data.packageId == "member_corporate") && (record.data.DaysLeft < 0))
		{
			return "yellowrow";
		}
		else if ((record.data.packageId == "member_individual" || record.data.packageId == "member_corporate") && (record.data.DaysLeft > 0))
		{
			return "redcell";
		}
		else if ((record.data.packageId == "member_individual" || record.data.packageId == "member_corporate") && (record.data.DaysLeft == 0))
		{
			return "greenrow";
		}
	};
        
	function toggleDetails(btn, pressed){
	    gridUserHistory.getView().refresh();
	}

	/**
	 * Function for Deleting record(s)
	 * @param { Object } btn
	 */
	function deleteRecordHistory(btn) {
		if (btn=='yes')
		{
			var selections = gridUserHistory.selModel.getSelections();
			for(i = 0; i< gridUserHistory.selModel.getCount(); i++){
				var conn = new Ext.data.Connection();
				conn.on('beforerequest', function() {
					Ext.MessageBox.wait('delete user [' + selections[i].json.username + ']');
				});
				conn.request({
					url: './admin/membership_manager/delete-user-detail/format/json',
					params: {
						uid: selections[i].json.id,
						username: selections[i].json.username
					},
	                failure:function(response,options){
	                	Ext.MessageBox.alert('Warning','Oops...');
	               	},                                      
	                success:function(response,options){
						var responseData = Ext.util.JSON.decode(response.responseText);
						if (responseData.success == true)
						{
							info('success', responseData.message);
						} else {
							info('Error', responseData.message);
						}
	                    dsContentHistory.reload();
	               	}                                      				
				});
				conn.on('requestcomplete', function() {
					Ext.MessageBox.hide();
				});
			}
		}
	}

	/**
	 * Handler to control grid editing
	 * @param {Object} oGrid_Event
	 */
	
	/*
	function handleEdit(editEvent) 
	{
		var gridField = editEvent.field;//determine what column is being edited
		updateDB(editEvent);
	}
	*/

	/**
     * Function for updating database
     * @param {Object} oGrid_Event
     */
	
	/*
    function updateDB(oGrid_Event) {
		//submit to server
        Ext.Ajax.request( 
        {   
        	waitMsg: 'Saving changes...',
            url: './admin/membership_manager/update-users',
            params: { 
            	id: oGrid_Event.record.data.id,
            	uid: oGrid_Event.record.data.uid,//for existing records this is the unique id (dalam hal ini guid)
                field: oGrid_Event.field,//the column name
                value: oGrid_Event.value,//the updated value
                originalValue: oGrid_Event.record.modified//the original value (oGrid_Event.orginalValue does not work for some reason)
                                                          //this might be a way to 'undo' changes other than by cookie?
													  	  //when the response comes back from the server can we make an undo array?                         
           	},
            failure:function(response,options){
				Ext.MessageBox.alert('Warning','Oops...');
                	//ds.rejectChanges();//undo any changes
            },//end failure block                                      
           	success:function(response,options){
           		var responseData = Ext.util.JSON.decode(response.responseText);
           		Ext.example.msg('Confirm', responseData.message);
				dsContentHistory.commitChanges();//commit changes (removes the red triangle which indicates a 'dirty' field)
				dsContentHistory.reload();
          	}                               
  		}); 
   	}; 
   	*/
   	
	/*
   	sentEmail = function ( id,uid )
   	{
   		var conn = new Ext.data.Connection();
		conn.on('beforerequest', function() {
			Ext.MessageBox.wait('Email sending');
		});
   		conn.request({
   			url:'./admin/membership_manager/sent-email',
   			params: {
   				id:id,
   				uid:uid
   			},
   			failure:function(response, options){
   				Ext.MessageBox.alert('Warning', 'Oops ...');
   				dsContentHistory.rejectChanges();
   			},
   			success:function(response,options){
   				dsContentHistory.commitChanges();
   				dsContentHistory.reload();
   			}
   		});
		conn.on('requestcomplete', function() {
			Ext.MessageBox.hide();
		});
   	}
   	*/
   	
	/*
   	changeStatus = function ( id,uid,action )
   	{
   		var conn = new Ext.data.Connection();
		conn.on('beforerequest', function() {
			Ext.MessageBox.wait('Change status');
		});
   		conn.request({
   			url:'./admin/membership_manager/set-active/format/json',
   			params: {
   				id:id,
   				uid:uid,
   				act:action
   			},
   			failure:function(response, options){
   				Ext.MessageBox.alert('Warning', 'Oops ...');
   				dsContentHistory.rejectChanges();
   			},
   			success:function(response,options){
   				dsContentHistory.commitChanges();
   				dsContentHistory.reload();
   			}
   		});
		conn.on('requestcomplete', function() {
			Ext.MessageBox.hide();
		});
   	}
   	*/

}, 10);
</script>