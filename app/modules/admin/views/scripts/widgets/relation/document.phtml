<style type="text/css">
	.bawah:link		{ color: #666666; font-size: 11px; font-family:  verdana,arial,helvetica,sans-serif;  text-decoration: none; }
	.bawah:active	{ color: #666666; font-size: 11px; font-family:  verdana,arial,helvetica,sans-serif;  text-decoration: none; }
	.bawah:visited	{ color: #666666; font-size: 11px; font-family:  verdana,arial,helvetica,sans-serif;  text-decoration: none; }
	.bawah:hover	{ color: #B79C00; font-size: 11px; font-family:  verdana,arial,helvetica,sans-serif;  text-decoration: none; }
	.bawah 			{ color: #666666; font-size: 11px; font-family:  verdana,arial,helvetica,sans-serif;  text-decoration: none; }
</style>

<script type="text/javascript"> 

setTimeout(function()
{
	dsDocument = new Ext.data.GroupingStore({
		proxy: new Ext.data.HttpProxy({
			 url: './services/relation/fetch-document'
		}),	
		reader: new Ext.data.JsonReader({
			root: 'document',
			totalProperty: 'totalCount',
			id: 'itemGuid'
		}, [
				 {name:'guid'}
				,{name:'itemGuid'}
				,{name:'fixedTitle'}
				,{name:'docType'}
				,{name:'docSize'}
				,{name:'docViewOrder'}
				,{name:'relatedGuid'}
		]),
		remoteSort: true
	});
	
	function renderTitle(val, cell, record, rowIndex, columnIndex, store)
	{
		rowRecord = gridDocument.getStore().getAt(rowIndex);
		return '<a href="admin/browser/download-file/guid/'+rowRecord.get('itemGuid')+'/parent/'+rowRecord.get('relatedGuid')+'" class="bawah">'+val+'</a>';
	}

    var xg = Ext.grid;
    var sm = new xg.CheckboxSelectionModel();
    var cm = new xg.ColumnModel
   	([
   		sm,
	    {header: "guid", dataIndex: 'itemGuid', width: 100, sortable: true, hidden: true},
	    {header: "Type", dataIndex: 'docType', width: 4, sortable: true},
	    {header: "Title", dataIndex: 'fixedTitle', width: 70, sortable: true, renderer:renderTitle,
	     editor: new Ext.form.TextField({
	     	allowBlank: false
	     })
	    },
	    {header: "Size", dataIndex: 'docSize', width: 7, sortable: true},
	    {header: "Order", dataIndex: 'docViewOrder', width: 5, align: 'center', sortable: true,
	     editor: new Ext.form.TextField({
	     	allowBlank: false
	     })
	    }
   	]);
	
	var paging = new Ext.ux.PagingToolbar({
		pageSize: 25,
		store: dsDocument,
		displayInfo: true,
		displayMsg: 'Displaying topics {0} - {1} of {2}',
		emptyMsg: "No data to display",
		items:[
			'-', {
				pressed: false,
				enableToggle: true,
		    	icon: './js/extjs/resources/images/default/silk/icons/page_white_magnify.png',
				cls: 'x-btn-icon',
				tooltip: 'Show preview',
				toggleHandler: toggleDetails
			}
		]	
	});
	
	var gridDocument = new xg.EditorGridPanel({
	    store: dsDocument,
	    cm: cm,
	    sm: sm,
	    bbar: paging,
	    tbar: [{
	    	text: 'Edit',
	    	icon: './js/extjs/resources/images/default/silk/icons/report_edit.png',
	    	cls: 'x-btn-text-icon',
	    	tooltip: 'Click to edit document',
	    	handler: function(){ 
	    		var selectedKeys = gridDocument.selModel.selections.keys;
	    		var encoded_keys = Ext.encode(selectedKeys);
	    		if (selectedKeys.length > 0)
	    		{
	    			ext_get("./admin/dms_fileuploader/edit/catalogGuid/"+encoded_keys+"/relatedGuid/"+gridDocument.getSelectionModel().getSelected().data.relatedGuid,580,430);
	    		}
	    		else
	    		{
	    			Ext.MessageBox.alert('Oops ...','Please select at least one item to delete');
	    		}
	    	}
	    }, {
	    	text: 'Delete',
	    	icon: './js/extjs/resources/images/default/silk/icons/report_delete.png',
	    	cls: 'x-btn-text-icon',
	    	tooltip: 'Click to delete selected rows',
	    	handler: function(){
	    		var selectedKeys = gridDocument.selModel.selections.keys;
	    		if (selectedKeys.length > 0)
	    		{
	    			Ext.MessageBox.confirm('Confirm','Do you really want to delete selection?',deleteRecordDocument);
	    		}
	    		else
	    		{
	    			Ext.MessageBox.alert('Oops ...','Please select at least one item to delete');
	    		}
	    	}
	    },'-',
	    {
	    	text: 'Refresh',
	    	icon: './js/extjs/resources/images/default/silk/icons/database_refresh.png',
	    	cls: 'x-btn-text-icon',
	    	tooltip: 'Click to Refresh the download document',
	    	handler: function(){ dsDocument.reload(); }
	    }
	    ],
	    selModel: new xg.RowSelectionModel({singleSelect:false}),
	    viewConfig:{forceFit:true},
	    collapsible: true,
	    enableColLock:false,
	    enableDragDrop: true,
	    stripeRows: true,
	    ddGroup: 'GridDD', 
	    loadMask: true,
	    layout:'fit',
	    forceFit:'fit'
	});

	gridDocument.addListener('afteredit', handleEditDocument);
  	// render it	    
  	Ext.getCmp('downloaddocument').add(gridDocument);
  	Ext.getCmp('downloaddocument').doLayout();
  	
    dsDocument.load({params:{start:0, limit:25, guid:'<?php echo $this->catalogGuid ?>'}});
    
	function toggleDetails(btn, pressed){
	    gridDocument.getView().refresh();
	}

	/**
	 * Function for Deleting record(s)
	 * @param { Object } btn
	 */
	function deleteRecordDocument(btn) {
		if (btn=='yes')
		{
			var selections = gridDocument.selModel.getSelections();
			for(i = 0; i< gridDocument.selModel.getCount(); i++){
				var conn = new Ext.data.Connection();
				conn.on('beforerequest', function() {
					Ext.MessageBox.wait('delete document [' + selections[i].json.fixedTitle + ']');
				});
				conn.request({
					url: './admin/api_catalog/delete/format/json',
					params: {
						guid: selections[i].json.itemGuid
					},
	                failure:function(response,options){
	                	Ext.MessageBox.alert('Warning','Oops...');
	               	},                                      
	                success:function(response,options){
						var responseData = Ext.util.JSON.decode(response.responseText);
						if (responseData.success == true)
						{
							info('success', responseData.message);
						} else {
							info('Error', responseData.message);
						}
	                    dsDocument.reload();
	               	}                                      				
				});
				conn.on('requestcomplete', function() {
					Ext.MessageBox.hide();
				});
			}
		}
	}

	/**
	 * Handler to control grid editing
	 * @param {Object} oGrid_Event
	 */
	function handleEditDocument(editEvent) 
	{
		var gridField = editEvent.field;
		updateDB(editEvent);
	}

	/**
     * Function for updating database
     * @param {Object} oGrid_Event
     */
    function updateDB(oGrid_Event) {
        Ext.Ajax.request( 
        {   
        	waitMsg: 'Saving changes...',
            url: './admin/api_fileuploader/update',
            params: { 
            	guid: oGrid_Event.record.data.itemGuid,
                field: oGrid_Event.field,
                value: oGrid_Event.value
           	},
            failure:function(response,options){
				Ext.MessageBox.alert('Warning','Oops...');
            },                                    
           	success:function(response,options){
           		var responseData = Ext.util.JSON.decode(response.responseText);
           		info('Confirm', responseData.message);
				dsDocument.commitChanges();
				dsDocument.reload();
          	}                               
  		}); 
   	}; 
   	
}, 10);
</script>