<script type="text/javascript"> 
	var selectedNode = tree.getSelectionModel().getSelectedNode();
	dsKlinik = new Ext.data.Store({ 
		proxy: new Ext.data.HttpProxy({
			url: './services/clinic/fetch-clinic'	
		}),
		reader: new Ext.data.JsonReader({
			root: 'clinic',
			totalProperty: 'totalCount',
			id: 'guid',
		}, [
				'title', 'createdby', 'modifiedby',  
				{name:'createdDate', mapping:'createdDate'},
				{name:'guid',mapping:'guid'},
				'status','question', 'content'
		]),
		remoteSort: true
	});
	
    function renderTclinic(value, p, record){ 
        return String.format( 
                '<div class="topic"><a href="javascript:;" onclick="detail(\''+record.id+'\');return false;"><b>{0}</b></a><br /><span class="author">by {1}</span></div>',
                value, record.data.createdby, record.id, record.data.guid);
    }
    function renderCreatedDate(value, p, r){
        return String.format('<span class="post-date">{0}</span><br/>modifiedBy {1}', value, r.data['modifiedby']);
    }
    function renderStatusClinic(val)
    {
    	if (val == 'publish_y') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/publish_y.png">';
    	} else if (val == 'publish_g') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/publish_g.png">';
    	} else if (val == 'publish_r') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/publish_r.png">';
    	} else if (val == 'publish_x') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/publish_x.png">';
    	} else if (val == 'ruby') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/ruby.png">';
    	} else if (val == 'pill') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/pill.png">';
    	} else if (val == 'disabled') {
    		return '<img src="./js/extjs/resources/images/default/silk/icons/disabled.png">';
    	}
    }

	Ext.ux.grid.PagingRowNumberer = Ext.extend(Ext.grid.RowNumberer, {
	  renderer : function(v, p, record, rowIndex, colIndex, store){
	    if (this.rowspan) {
	    	p.cellAttr = 'rowspan="' + this.rowspan + '"';
	    }
	
	    var so = store.lastOptions;
	    var sop = so? so.params : null;
	    return ((sop && sop.start)? sop.start : 0) + rowIndex + 1;
	  }
	});

    var xg = Ext.grid;
    var sm = new xg.CheckboxSelectionModel();
    var pg = new Ext.ux.grid.PagingRowNumberer({header:'No.',width:30});
    var cm = new xg.ColumnModel
   	([
   		sm,
   		pg,
		{header: "Clinic", dataIndex: 'title', width: 277, renderer:renderTclinic},
	    {header: "Created on", dataIndex: 'createdDate', width: 100, renderer:renderCreatedDate},
	    {header: "Published", dataIndex: 'status', width: 30, renderer: renderStatusClinic}
   	]);
	
	var paging = new Ext.ux.PagingToolbar({
		pageSize: 25,
		store: dsKlinik,
		displayInfo: true,
		displayMsg: 'Displaying topics {0} - {1} of {2}',
		emptyMsg: "No data to display"
	});
	
	var gridKlinik = new xg.GridPanel({
		id:'clinic-grid',
	    ds: dsKlinik,
	    cm: cm,
	    sm: sm,
	    bbar: paging,
		viewConfig: {
			forceFit:true,
			enableRowBody:true,
			showPreview:true,
			getRowClass : function(record, rowIndex, p, ds)
			{
              	if (this.showPreview) { 
               		p.body = '<p align="justify">'+record.data.question+'</p>';
                	return 'x-grid3-row-expanded';
            	}
            	return 'x-grid3-row-collapsed';
			}
        },
	    tbar: [{
		    	text: 'Delete [' + tree.getSelectionModel().getSelectedNode().text + ']',
		    	icon: './js/extjs/resources/images/default/silk/icons/bin_empty.png',
		    	cls: 'x-btn-text-icon',
		    	tooltip: 'Click to delete selected rows',
		    	handler: function(){
		    		var selectedKeys = gridKlinik.selModel.selections.keys;
		    		if (selectedKeys.length > 0)
		    		{
		    			Ext.MessageBox.confirm('Confirm','Do you really want to delete selection?',deleteRecordClinic);
		    		}
		    		else
		    		{
		    			Ext.MessageBox.alert('Oops ...','Please select at least one item to delete');
		    		}
		    	}
            },
            {
		    	text: 'Refresh',
		    	icon: './js/extjs/resources/images/default/silk/icons/database_refresh.png',
		    	cls: 'x-btn-text-icon',
		    	tooltip: 'Click to Refresh the table',
		    	handler: function(){ dsKlinik.reload(); }
            },
	    '-', {
	        	pressed: true,
	            enableToggle:true,
	            text:'&nbsp;Preview',
	            tooltip: 'View a short summary of each post in the list',
	            iconCls: 'summary',
	            toggleHandler: toggleDetails
		}
	    ],
	    selModel: new xg.RowSelectionModel({singleSelect:false}),
	    trackMouseOver:false,
	    enableColLock:false,
	    stripeRows: true,
	    loadMask: true,
	    layout:'fit',
	    forceFit:'fit'
	});

  	// render it	    
  	Ext.getCmp('kutu-Klinik').add(gridKlinik);
  	Ext.getCmp('kutu-Klinik').doLayout();
  	dsKlinik.baseParams = {status:'<?=$this->status ?>'};
	dsKlinik.load({params:{start:0, limit:25, status:'<?=$this->status ?>'}});
	
	function deleteRecordClinic(btn) {
		if (btn=='yes')
		{
	    	var selections = gridKlinik.selModel.getSelections();
			for(j = 0; j < gridKlinik.selModel.getCount(); j++){
				var conn = new Ext.data.Connection();
				conn.on('beforerequest', function() {
					Ext.MessageBox.wait('delete clinic [' + selections[j].json.title + ']'); 
				});						
				conn.request({
					url: './admin/api_catalog/delete/format/json',
					params:{guid: selections[j].json.guid},
					callback:function(options, success, response){
						if (success) {
							json = Ext.decode( response.responseText );
							if ( json.success ) {
								dsKlinik.reload(); 
								info( 'success', json.message );
							} else {
								Ext.Msg.alert( 'Failure', json.error );
							}
						} else {
							Ext.Msg.alert( 'Error', 'Failed to connect to the server.');
						}
					}
				});
				conn.on('requestcomplete', function() {
					Ext.MessageBox.hide();
				});						
			}
		}
	}

    function toggleDetails(btn, pressed){
        var view = Ext.getCmp('clinic-grid').getView();
        view.showPreview = pressed;
        view.refresh();
    }
	detail = function( article )
	{
		if (article)
		{
			ext_get('./admin/browser/view-in-new-tab/catalogGuid/'+article+'/folderGuid/lt498d49d30c8c1',800,500);
		}
		else
		{
			Ext.MessageBox.alert('Warning','There is no related item ...');
		}
	}
	
	gridKlinik.on('rowcontextmenu',showRowContextMenu);
	
	function showRowContextMenu(grid, rowIndex, e)
	{
		var coords = e.getXY();
		rowRecord = dsKlinik.getAt(rowIndex);
		e.stopEvent();
		menuG.showAt([coords[0], coords[1]]);
	}
	    
	var menuG = new Ext.menu.Menu('mainGridRowContext');
	menuG.add({
		text:'answer', 
		handler: function(){ ext_get("./admin/clinic_manager/answer-clinic/catalogGuid/"+rowRecord['id'],750,500); }
	},
	{
		text:'Add Relation',
		iconCls:'relation',
		handler: function() { 
			var selectedKeys = gridKlinik.selModel.selections.keys;
			if (selectedKeys.length > 0)
			{
				ext_get("./admin/widgets_relation/viewsearch/guid/"+selectedKeys,830,500,'viewsearch');
			}
			else
			{
				Ext.MessageBox.alert('Oops ...','Please select at least one item');
			}
		}			

	}
	);
	
</script>